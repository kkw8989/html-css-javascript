2024.09.19.

// es5 ver.
function Person(name,age){   
  this.name = name; 
  this.age = age; 

}

person.prototype.greet= function(){
  console.log("hello, my name is " + this.name);
};

const jia = new person('jia', 25); 
const sia = new person('sia', 27); 

jia.greet();  
sia.greet();

-------------------------------------------------------------------------------------------------------

js에선 class를 객체 -> 클래스로 만듦

// es6 ver.
class Person{   
  constructor(name,age){ --> constructor : 생성함수, 클래스 안에서 필드 생성하는 메서드
    this.name = name; 
    this.age = age; 
  }
  greet(){
  console.log(this);
  console.log(`Hi, my name is ${this.name} and I'm ${this.age} years old`);
  }
  farewell(){
    console.log("goodbye friend");
  }
}
const jina = new Person('jina', 25); --> Person(class) -> 인스턴스로 -> 원하는 대로 바꿈

jina.greet();  
jina.farewell();

-------------------------------------------------------------------------------------------------------

# 정적 메서드 : 클래스 함수 자체에 메서드를 설정 -> 클래스 안에 static 키워드 사용, 정적 메서드는 어떤 특정 객체가 아닌 클래스에 속한 함수를 구현할 때 주로 사용

class Person{   
  constructor(name,age){
    this.name = name; 
    this.age = age; 
  }
  static info(){
    console.log("I am a Person calss, nice to meet u");
  }
}
const jina = new Person('jina', 30); 

Person.info();  --> 출력 -> info는 Person과 소속, info 변형 불가 
jina.info();  --> 에러 -> info는 jina와 소속되어 있지 않음
--> static 있으면 있는 객체 그대로 쓰고, 인스턴스로 변형하지 말고 그대로 써라 

-------------------------------------------------------------------------------------------------------

# set와 get
세터 및 게터 메서드를 사용하여 클래스 내에 값을 설정하거나 가져올 수 있다
set(수정) : 업데이트 한다 , get(조회) : 읽어들임

class Person{   
  constructor(name,surname){
    this.name = name; 
    this.surname = surname; 
    this.nickname = ""
  }
  set nicknames(value){
    this.nickname = value;
    console.log(this.nickname); 
  }
  get nicknames(){
     console.log(`Your nickname is ${this.nickname}`);
  }
}
const jina = new Person('jina', "lee");
jina.nicknames = "yoyo";  --> yoyo를 set에서 받아들임 : 업데이트
jina.nicknames; --> get이 받음 : 조회 

-------------------------------------------------------------------------------------------------------

# 클래스 상속 : 기존 클래스에서 새로운 클래스를 extends 키워드를 사용하여 상속

class Person{   
  constructor(name, age){ 
    this.name = name; 
    this.age = age; 
  }
  greet(){
  console.log(`Hi, my name is ${this.name} and I'm ${this.age} years old`);
  }
}
class Adult extends Person{   
  constructor(name, age, work){ --> constructor : Adult의 필드 생성
    super(name, age)  --> 부모한테 상속 받을 메서드 씀 
    this.work = work;
  }
const jina = new Adult("yoyo", 28, "software developer");

console.log(jina.age);
console.log(jina.work);
jina.greet();

-------------------------------------------------------------------------------------------------------

class Classroom extends Array{   
  constructor(name, ...students){  --> ...student가 Array의 필드, ...은 last 연산자
    super(...students);  --> Array한테 받음
    this.name = name; 
  }
  add(student){
    this.push(student);  --> push : 맨 뒤에 추가하는 메서드, 무조건 array 와야 함
  }
}
const myClass = new Classroom('A', --> A는 constructor(name에), 나머지는 ...student에
                              {name : "Tim", mark : 6},
                              {name : "Tom", mark : 3},
                              {name : "Jim", mark : 8},
                              {name : "Jon", mark : 10},
                              );
myClass.add({name : "Timmy", mark :7});

for (const student of myClass){  --> 배열에 순차적 접근
  console.log(student);
}

-------------------------------------------------------------------------------------------------------

콜 백 함수(프로미스 나오기 전)
ex) a를 하고, a가 완료될 때 까지 기다렸다가 b수행, b 완료될 때 까지 ~ 반복

const makePizza =(ingredients, callback)=>{
  mixIngredients(ingredients, function(mixedIngredients)){
                 bakePizza(mixedIngredients, function(bakedPizza)){
    console.log('finished!');}}};


# 프로미스(비동기)
비동기 작업의 성공 또는 실패를 나타내는 객체

대기중(Pending): 프로미스 객체의 기본 상태, 비동기 처리 결과가 아직 나오지 않은 상태.
이행완료(Fullfilled): 비동기 처리가 완료 되어 결과를 얻은 상태. resolve() 함수를 호출함.
거부됨(Rejected): 비동기 처리는 완료 되었지만, 실패한 상태. reject() 함수를 호출함.

프로미스가 성공할 때 값을 얻는 데는 .then()
실패할 때 오류를 처리하는 데에는 .catch()를 사용 
const myPromise = new Promise((resolve,reject) => { 코드작성 }

const myPromise = new Promise((resolve,reject) => {
  resolve('프로미스 성공')
});          
myPromise.then( data => {console.log(data);})
	  .catch(err => {console.log(err);});
-> 프로미스가 성공할 때의 값을 얻는 데는 then() 
--> data에 resolve 값 대입      

-------------------------------------------------------------------------------------------------------

const promise = new Promise((resolve, reject)=>{
  console.log('doing something...');
  setTimeout(()=>{reject(new Error('no network'));}, 2000);
});
  promise
    .then((value)=>{console.log(value);})
    .catch(error=>{console.log(error);})
    .finally(()=>{console.log('finally');})  --> 성공하든 실패하든 무조건 실행

-------------------------------------------------------------------------------------------------------

const getHen=()=>
new Promise((resolve, reject)=>{
  setTimeout(()=>resolve('닭'),200);
});
const getEgg=hen=>   --> 닭 = getEgg = hen
new Promise((resolve, reject)=>{
  setTimeout(()=>resolve(`${hen}=>알`),200);  --> hen => 알 
});
const cook=egg=>    --> hen => 알 = cook = egg
new Promise((resolve, reject)=>{
  setTimeout(()=>resolve(`${egg}=>달걀후라이`),200);  -> egg => 달걀후라이
});
getHen()
.then(getEgg). then(cook). then(console.log);  --> getEgg()로 쓰면 동시호출 발생 
출력 값 : “닭=>알=>달걀후라이”

-------------------------------------------------------------------------------------------------------

function walk(amount){
  return new Promise((resolve, reject)=>{
    if (amount < 500){
      reject('500보다 작아 ');
    }
    setTimeout(()=>resolve(`you walked for ${amount}ms`), 500);
  });
};
walk(1000)
  .then(res =>{console.log(res);return walk(500);})
  .then(res =>{console.log(res);return walk(700);})
  .then(res =>{console.log(res);return walk(800);})
  .then(res =>{console.log(res);return walk(100);})
  .then(res =>{console.log(res);return walk(400);})
  .then(res =>{console.log(res);return walk(600);});

-------------------------------------------------------------------------------------------------------

function asyncWork(value){
return new Promise((resolve, reject)=>{
  setTimeout(()=>{
    value -= 20;
    if(value > 50){
      resolve(value);
    }else{
      reject(value);
    }
  },500);
});
}

let asyncFunc = async function(){   --> async :　비동기함수
  try{ --> try : catch와 같이 쓰이는데 실행해야 하는 명령문
    let res = await asyncwork(100);
    console.log('resolvel : ' + res);
    res = await asyncWork(res);   --> res 앞에 let이 없다 -> 재할당 
    console.log('resolvel2 : ' + res);  --> 80
    res = await asyncWork(res);
    console.log('resolvel3 : ' + res);  --> 60
  }catch(err){
    console.log('catch : ' + res);
  }
}
asyncFunc();
출력 값 : "resolve : 80" , "resolve" : 60, "catch: 40"

-------------------------------------------------------------------------------------------------------

function delay(ms) {
  return new Promise (resolve => setTimeout(resolve, ms));
}

async function getApple() {
  await delay(1000);
  return `사과`;
}
async function getBanana() {
  await delay(1000);
  return `바나나`;
}

async function pickFruits(){
  const apple = await getApple();
  const banana = await getBanana();
  return `${apple} + ${banana}`;
}
pickFruits().then(console.log);
