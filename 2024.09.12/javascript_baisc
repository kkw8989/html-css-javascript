2024.09.12.

const car = {
  ferrari : "california",
  porche : "911",
  bugatti : "veyron"
};
const select = "ferrari"
console.log(car[select]); //select는 ferrari라는 값이 아닌 키 값을 인식함 - "california" 나옴

-----------------------------------------------------------------------------------------------

let car ={      
  color : 'red',
};  
let secondCar = car;
car.wheels = 4; // car에서 wheels 추가
car.wheels1 = 5;
secondCar.drive = 'fast'; // car에서 drive 추가
console.log(car);
console.log(secondCar); // string 먼저 나오는데 순서는 중요 x, -> 잘못된 방법

-----------------------------------------------------------------------------------------------

자바스크립트에서 객체 복사본 만드는 방법
const car ={      
  color : 'red',
};  
const secondCar = Object.assign({}, car); 
// assign은 object를 조작하기 위한 메서드, 비어있는 객체에 car 합쳐라

car.wheels = 4; // car에서 wheels 추가

console.log(car);
console.log(secondCar); 

-----------------------------------------------------------------------------------------------

const person ={      
  name : 'jia',
  age : 25,
};  
person ={      
  name : 'gang',
  age : 24,
};  
person.age = 35;
console.log(person.age); // 35가 나옴 
-> const는 속성값 바꾸면 바뀜 , 근데 person 자체인 객체를 바꾸는 건 안 됨

-----------------------------------------------------------------------------------------------

const person ={      
  name : 'jia',
  age : 25,
};  
person.age = 15;
console.log(person.age); // 15
Object.freeze(person); 
// Object가 객체이므로 freeze(이곳에 객체 와야 함), freeze는 변경할 수 없는 메서드
person.age = 30; 
console.log(person.age); // 15나옴

-----------------------------------------------------------------------------

변수 호이스팅(hoisting)
js는 호이스팅을 지원 -> 변수, 함수를 어느 위치에서 선언하더라도 사용할 수 있음
ex) let, const, var(es5), 

function hi(){
  console.log(a);
  var a = 1;
}
hi(); // undefined : 공간은 있지만 값이 없음, 호이스팅 때문에 나옴

-----------------------------------------------------------------------------

console.log(i); // ES5
var i = "I am a variable"; 

// TDZ (TEMPORAL DEAD ZONE : 일시적 비활성 구역)
console.log(j); // ES6, let, const TDZ로 보내버려서 오류 뜨게 함, var는 x
let j ="I am a let";

-----------------------------------------------------------------------------

var name = "gang";
var name = "woo";
console.log(name);

let name2 = "gang";
let name2 = "woo"; 
console.log(name2);

// ES5에선 var name이 2개여도 오류x, ES6에서 let을 쓰게 함으로 써 오류 뜨게 함 
// var는 한번 선언한 변수의 이름을 재선언 가능
// let은 재선언 불가, 재할당은 가능
// const는 재선언도 불가, 재할당도 불가

-----------------------------------------------------------------------------

// let name = "seon"; -> name : 전역변수
if (true){
  let name = "seon"; // name : 지역변수
  console.log(name);
}
  console.log(name); // JS Bin Output 나옴, why? 지역변수라, { }：스코프

-----------------------------------------------------------------------------

const veggie = ["tomato","cucumber","beans"]; // 배열 : 의미가 똑같아야 함
let meat = ["pork","beef","chicken"];

// ... : spread 연산자를 이용하여 새롭게 복사하여 객체를 복사
let menu = [...veggie, "pasta", ...meat]; 
// console.log(menu)
// console.log(menu[0])

meat[2] = "fish";
console.log(menu); 
// fish로 안바뀜 why? ...spread 연산자 때문에 이미 menu는 만들어짐, 대입의 개념 x
menu = [...veggie, "pasta", ...meat]
console.log(menu); // chicken -> fish로 바뀜

-----------------------------------------------------------------------------

일반 함수 es5
function add(a,b){
  return a*b;
}
console.log(add(1,2)); // 3

매개변수 : 바깥에 있는 값을 scope 안으로 넣을 때
Return : 안에 있는 값을 scope 외부로 보낼 때

화살표 함수 es6
let add2 = (a,b) => a+b;
console.log(add2(3,5)); // 8

arugument 객체 : 나머지 변수를 배열로 저장
let multiply = (a,b, ...args) => {  // -> args 대신 아무 이름 적어도 됨,
  let result = a*b;
  for(let i=0; i<args.length; i++){  
    result *= args[i];  //   2*2, 6*4
  }
  return result; // 24
}
console.log(multiply(1,2,3,4))

-----------------------------------------------------------------------------

//es5
const greeting = function(name){
  return "hello " + name;
}
console.log(greeting("gang")); // "hello gang"

//es6
const greeting2= name => `hello ${name}`;
console.log(greeting2(`gang`)); // "hello gang"

-----------------------------------------------------------------------------

this : 자기 자신을 감싸고 있는 객체를 가리킴, 함수를 유연하게 쓰고 싶을 때 사용
const person1 = {
  age:10, // 이 age는 person1에선 지역변수, grow:function에서 전역변수
  grow:function() {
    console.log(this); // 이 this 는 age, grow를 감싸고 있는 person(객체) 가리킴
    this.age++;
      console.log(this.age); // 11
  },
};
person1.grow(); // 11

const person2 = {
  age : 10,
  grow :() => {
    console.log(this); // 이 this는 window(최종 개체) 가리킴
    this.age++;
      console.log(this.age);  // window에 1을 더하라 했으니 Nan이 뜸
  },
};
person2.grow(); // Nan

-----------------------------------------------------------------------------

` $[ ]` : 벤틱
const showwinner = (...args) => {
  const winner = args[0];
  console.log(` ${winner} was the winner`);
};

showwinner("jinsu", "mina", "jihun"); // "jinsu was the winner

-----------------------------------------------------------------------------

map : 배열 객체일　때 사용가능, 순차 처리, 업데이트 or 수정할 때 사용, 원래 값 변경x
let arr=[1, 2, 3];
let func=arr.map(n=>n+1); // [2, 3, 4] 나옴
console.log(func);
